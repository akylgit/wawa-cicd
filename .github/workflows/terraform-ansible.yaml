name: Provision EC2 Instances & Configure with Ansible

on:
  push:
    branches:
      - terraform-ansible

jobs:
  provision-and-configure:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible jq

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init

      - name: Terraform Destroy (optional cleanup)
        working-directory: ./infra
        run: |
          echo "Destroying previous resources if any..."
          # Use -lock=false if state locking is not desired in cleanup or causes issues
          terraform destroy -auto-approve || echo "Nothing to destroy."

      - name: Terraform Apply
        working-directory: ./infra
        run: terraform apply -auto-approve

      # This step needs to output just the array of IPs.
      # Assuming 'instance_public_ips' is an output variable that is a list of strings (IPs).
      - name: Save Terraform output to JSON file
        working-directory: ./infra
        run: terraform output -json | jq -r '.instance_public_ips[]' > $GITHUB_WORKSPACE/ips.txt

      - name: Show extracted IPs
        run: cat ips.txt

      - name: Generate Ansible Inventory
        run: |
          echo "[webservers]" > inventory.ini
          # Read IPs directly from ips.txt where each IP is on a new line
          cat ips.txt >> inventory.ini
          echo "--- Inventory Generated ---"
          cat inventory.ini

      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEVOPS_SSH_KEY }}" > ~/.ssh/devops-key
          chmod 600 ~/.ssh/devops-key

      - name: Wait for EC2 instances to be ready and Run Ansible Playbook
        # Add a delay and retry logic for Ansible to ensure instances are fully up and SSHable
        run: |
          ansible_cmd="ansible-playbook -i inventory.ini ansible/playbook.yaml --private-key ~/.ssh/devops-key -u ubuntu"
          max_retries=5
          retry_interval=30
          for i in $(seq 1 $max_retries); do
            echo "Attempt $i/$max_retries: Running Ansible Playbook..."
            if eval "$ansible_cmd"; then
              echo "Ansible playbook ran successfully."
              break
            else
              echo "Ansible playbook failed. Retrying in $retry_interval seconds..."
              sleep $retry_interval
            fi
            if [ $i -eq $max_retries ]; then
              echo "Max retries reached. Ansible playbook failed."
              exit 1
            fi
          done
